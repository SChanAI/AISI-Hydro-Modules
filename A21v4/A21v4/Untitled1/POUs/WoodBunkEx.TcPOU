<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="WoodBunkEx" Id="{7c192e4b-e9ee-4c1c-a070-15e2c6191789}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK WoodBunkEx
VAR_IN_OUT //controls
	execute : BOOL;
	stop : BOOL;
	
	manualStep : BOOL;
	manualSuction : BOOL;
END_VAR
VAR_IN_OUT //references to required hardware
	robotLeft, robotRight : RobotA21;
	toolStorageLeft, toolStorageRight : A21ToolStorage;
	
	stagingTableLeft, stagingTableRight : GenericStagingTable;
	magazineLeft, magazineRight : GenericSkidMagazine;
	
	strapper : StrapMachine;
	
	horizontalDriveLeft, horizontalDriveRight : AirPiston;
	verticalDriveLeft, verticalDriveRight : ClearLinkMC;
	pistonBottom : SimplePiston;
	
	suctionTop : ARRAY[*(*1..3*)] OF SuctionPad;
	suctionLeft : ARRAY[*(*1..4*)] OF SuctionPad;
	suctionRight : ARRAY[*(*1..4*)] OF SuctionPad; 
	suctionBottom : ARRAY[*(*1..2*)] OF SuctionPad;
END_VAR
VAR_OUTPUT
	//ready : BOOL;
	done : BOOL;
	
	generalError : BOOL;
	failLeft, failRight : BOOL;
END_VAR
VAR //for testing, to be removed when replaced with pressure sensors
	latchLeft, latchRight : BOOL; //prevents SMC sliders from overshooting the inner limit sensor
	
	suctionEnableTop : BOOL;
	suctionEnableLeft : BOOL;
	suctionEnableRight : BOOL;
	suctionEnableBottom : BOOL;
END_VAR
VAR	
	topSuctionDelay : TON;
	
	step : (IDLE, STAGING, LOAD_WB, PUSH, STRAP, RELEASE, COMPLETE := 1050);
	iPair : INT;
	//these 2 ints should replace the 4 ints after
	masterStep : INT;
	subStepLeft, subStepRight : INT;
	
	loadSet : INT;
	loadStepLeft, loadStepRight : INT;
	
	stageSet : INT;	
	stageStepLeft, stageStepRight : INT;
	iSlotLeft, iSlotRight : INT;
END_VAR
VAR //local types
	demoHeight : REAL := 600; //mm
	materialsArr : ARRAY[0..GVL.maxPairs] OF PositionMaterials := [
		(
			position := 69,
			top := 'WDS20',
			left := 'WDS20',
			right := 'WDS20',
			bottom := 'WDS14'
		)];
	
	templateSlotsLeft, templateSlotsRight : ARRAY[1..10] OF STRING;
	templateOccupancyLeft, templateOccupancyRight : ARRAY[1..10] OF BOOL;
	stagingTemplateLeft, stagingTemplateRight AT %M* : GenericStagingTable;	
	stagingArrayLeft, stagingArrayRight : ARRAY[0..(GVL.maxPairs+1)*2] OF STRING;
	
	insertionLeft, insertionRight : Insertion;
	loadedMaterials : ARRAY[Surface.TOP..Surface.BOTTOM] OF STRING;
END_VAR
VAR CONSTANT
	sectionID : SectionEnum := SectionEnum.WOOD_BUNK;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{warning disable C0371} //supress [external reference] warnings
callLocalModules();

IF stop THEN
	insertionLeft.stop();
	insertionRight.stop();
	pistonBottom.stop();
	
	robotLeft.clearCommand();
	robotRight.clearCommand();
	RETURN;
END_IF

IF NOT insertionLeft.screw.HomeSet AND insertionRight.screw.HomeSet THEN
	insertionLeft.homingSequence();
	insertionRight.homingSequence();
	pistonBottom.retract();
	RETURN;
END_IF

CASE step OF
	IDLE:
		IF execute THEN
			execute := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			step := STAGING;
		END_IF
		
		SetSuctions(suctionTop, suctionEnableTop);
		SetSuctions(suctionLeft, suctionEnableLeft);
		SetSuctions(suctionRight, suctionEnableRight);
		SetSuctions(suctionBottom, suctionEnableBottom);
		
	STAGING:
		IF NOT done THEN
			done := stage(error => generalError);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			execute := FALSE;
			done := FALSE;
			step := LOAD_WB;
		END_IF
	
	LOAD_WB:
		IF NOT done THEN
			done := load(pair := materialsArr[iPair], error => generalError);
		END_IF
		
		IF manualSuction THEN
			SetSuctions(suctionTop, suctionEnableTop);
			SetSuctions(suctionLeft, suctionEnableLeft);
			SetSuctions(suctionRight, suctionEnableRight);
			SetSuctions(suctionBottom, suctionEnableBottom);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			done := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			execute := FALSE;
			
			step := PUSH;
		END_IF
		
	PUSH:
		IF
			(manualStep AND_THEN execute) OR
			(latchLeft AND latchRight AND pistonBottom.extended)
		THEN
			latchLeft := latchRight := FALSE;
			execute := FALSE;
			step := STRAP;
		END_IF
		
		IF NOT(
			InsertionQuality(
				suctions:= suctionTop, 
				insertionMaterial:= loadedMaterials[Surface.TOP], 
				recipeMaterial:= materialsArr[iPair].top)
			AND
			InsertionQuality(
				suctions:= suctionLeft, 
				insertionMaterial:= loadedMaterials[Surface.LEFT], 
				recipeMaterial:= materialsArr[iPair].left)) //AND
			//InsertionQuality(suctions:= rightSuction, insertionMaterial:= insertionMaterials[Surface.RIGHT], recipeMaterial:= demoPair.right) AND
			//InsertionQuality(suctions:= bottomSuction, insertionMaterial:= insertionMaterials[Surface.BOTTOM], recipeMaterial:= demoPair.bottom))
		THEN
			generalError := TRUE;
			RETURN;
		END_IF
		(*
		IF 
			insertionLeft.sliderPos <> demoHeight/2 //OR 
			//insertionRight.sliderPos <> demoHeight/2 //OR 
			//NOT insertionBottom.contact
		THEN
			insertionLeft.slideAbsolute(demoHeight/2);
			//insertionRight.slideAbsolute(demoHeight/2);
			RETURN;
		END_IF
		*)
		
		IF insertionLeft.screw.AtInnerLimit THEN
			latchLeft := TRUE;
		ELSIF NOT latchLeft THEN
			insertionLeft.press();
		END_IF
		
		IF insertionRight.screw.AtInnerLimit THEN
			latchRight := TRUE;
		ELSIF NOT latchRight THEN
			insertionRight.press();
		END_IF
		pistonBottom.extend();
		
	STRAP:
		topSuctionDelay(IN:= , PT:= T#1S, Q=> , ET=> );
		
		strapper.bEnable := TRUE;
		IF strapper.done THEN
			topSuctionDelay.IN := FALSE;
			step := RELEASE;
			RETURN;
		END_IF
		
		IF topSuctionDelay.Q THEN
			SetSuctions(suctionTop, FALSE);
			SetSuctions(suctionLeft, FALSE);
			SetSuctions(suctionRight, FALSE);
			SetSuctions(suctionBottom, FALSE);
		ELSIF strapper.atBundleLevel THEN
			topSuctionDelay.IN := TRUE;
		END_IF
		
		IF strapper.ready THEN
			strapper.strap();
		END_IF
		
		IF execute THEN
			topSuctionDelay.IN := FALSE;
			execute := FALSE;
			step := RELEASE;
		END_IF
		
	RELEASE: //release command		
		//insertionLeft.slideAbsolute(0);
		//insertionRight.slideAbsolute(0);
		
		insertionLeft.release();
		insertionRight.release();
		pistonBottom.retract();
		
		IF 
			(insertionLeft.screw.AtHome AND insertionRight.screw.AtHome AND pistonBottom.retracted) OR
			execute
		THEN
			execute := FALSE;
			step := COMPLETE;
		END_IF
	
	COMPLETE:
		//reset everything
		iPair := (iPair + 1) MOD GVL.maxPairs;
		step := IDLE;
		
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Loading" Id="{d5b5a4e4-ee29-48b3-b5c8-451836b38fcb}" />
    <Folder Name="Staging" Id="{d65a2989-4fa8-4947-a8e8-602f97dc611d}" />
    <Folder Name="Template" Id="{cd893e68-3f3a-4606-a79f-9e9ae0341cae}" />
    <Method Name="callLocalModules" Id="{b785fa8b-1ece-45c9-a9bb-2e324f2e1263}">
      <Declaration><![CDATA[METHOD callLocalModules : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
stagingTemplateLeft(slots := templateSlotsLeft, occupied := templateOccupancyLeft);
stagingTemplateRight(slots := templateSlotsRight, occupied := templateOccupancyRight);

insertionLeft(
	enable:= TRUE, 
	slider:= verticalDriveLeft, 
	screw:= horizontalDriveLeft, 
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );
	
insertionRight(
	enable:= TRUE, 
	slider:= verticalDriveRight, 
	screw:= horizontalDriveRight,  
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="createStagingArrayLeft" Id="{267fdecb-2bd1-4d34-885b-8346cf63d26a}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD createStagingArrayLeft : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxPairs BY 1 DO
	remainingMaterial := materialsArr[i].top;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayLeft, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayLeft, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
	
	
	remainingMaterial := materialsArr[i].left;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayLeft, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayLeft, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="createStagingArrayRight" Id="{16356a3e-786d-4de1-9a22-49e2a7eb3ddd}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD createStagingArrayRight : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO GVL.maxPairs*2 BY 1 DO
	remainingMaterial := materialsArr[i].bottom;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayRight, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayRight, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
	
	
	
	remainingMaterial := materialsArr[i].right;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayRight, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayRight, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateStagingTemplate" Id="{559e2100-9d18-4e6d-a37b-fe2e4a5b8bd4}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD PROTECTED generateStagingTemplate : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR
VAR_STAT
	temp : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[createStagingArrayLeft();
createStagingArrayRight();

//AddToStringArray(arr := stagingArrayLeft, newString := 'WDB20', numElements =>, nextIndex => );

(*
iterate through all pairs and autofill the template
replace succesfully autofilled materials with empty string

when staging needs to be performed a 2nd time, autofilling empty strings is always unsuccessful
*)
FOR i:=0 TO GVL.maxPairs*2 BY 1 DO
	IF stagingTemplateLeft.autofill(materialID := stagingArrayLeft[i]) THEN
		stagingArrayLeft[i] := '';
	END_IF
	
	IF stagingTemplateRight.autofill(materialID := stagingArrayRight[i]) THEN
		stagingArrayRight[i] := '';
	END_IF
END_FOR

(*
stagingTemplateLeft.autofill(demoPairWB.top);
stagingTemplateLeft.autofill(demoPairWB.left);

stagingTemplateRight.autofill(demoPairWB.right);
stagingTemplateRight.autofill(demoPairWB.bottom);
*)

generateStagingTemplate := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="load" Id="{41d6aef3-60c1-439a-bdd2-e372cfed0011}" FolderPath="Loading\">
      <Declaration><![CDATA[METHOD PROTECTED load : BOOL
VAR_INPUT
	pair : REFERENCE TO PositionMaterials;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR
VAR_STAT
	leftMaterial : STRING;
	rightMaterial : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
(*
IF NOT robotLeft.operational OR NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF
*)

IF robotLeft.error (*OR robotRight.error*) THEN
	error := TRUE;
	RETURN;
	
ELSIF NOT (robotLeft.reserve(sectionID) (*AND robotRight.reserve(sectionID)*)) THEN //loading requires both robots be reserved together
	RETURN;
	
ELSIF //robots have wrong tool
	(robotLeft.tool <> sectionID AND_THEN NOT robotLeft.changeEOAT(targetTool := sectionID)) //OR
	//(robotRight.tool <> sectionID AND_THEN NOT robotRight.changeEOAT(targetTool := sectionID))
THEN
	RETURN;
END_IF
failLeft := FALSE;
failRight := FALSE;

CASE loadSet OF
	0: //top and bottom
		leftMaterial := pair.top;
		rightMaterial := pair.bottom;
		IF 
			loadingSequence(
				robot:= robotLeft, 
				table:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				slot:= iSlotLeft,
				suctions:= suctionTop,
				surfaceID:= Surface.TOP, 
				material:= pair.top, 
				fail=> failLeft)
			(*
			AND
			loadingSequence(
				robot:= robotRight,
				table:= stagingTableRight, 
				loadStep:= loadStepRight, 
				slot:= iSlotRight,
				suctions:= bottomSuction,
				surfaceID:= Surface.BOTTOM, 
				material:= pair.bottom, 
				fail=> failRight)
			*)
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := 10;
		END_IF
		
	10: //sides
		leftMaterial := pair.left;
		rightMaterial := pair.right;
		IF
			loadingSequence(
				robot:= robotLeft, 
				table:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				slot:= iSlotLeft,
				suctions:= suctionLeft,
				surfaceID:= Surface.LEFT, 
				material:= pair.left, 
				fail=> failLeft)
			(*
			AND
			loadingSequence(
				robot:= robotRight, 
				table:= stagingTableRight, 
				loadStep:= loadStepRight, 
				slot:= iSlotRight,
				suctions:= rightSuction,
				surfaceID:= Surface.RIGHT, 
				material:= pair.right, 
				fail=> )
			*)
		THEN
			loadStepLeft := loadStepRight := 0;
			//loadSet := 20;
			loadSet := COMPLETE;
		END_IF
		
	20: //left robot to bottom insertion - module only
		leftMaterial := pair.bottom;
		IF 
			loadingSequence(
				robot:= robotLeft, 
				table:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				slot:= iSlotLeft,
				suctions:= suctionBottom,
				surfaceID:= Surface.BOTTOM, 
				material:= pair.bottom, 
				fail=> failLeft)
		THEN
			loadSet := COMPLETE;
		END_IF
	
	COMPLETE:
		loadSet := 0;
		loadStepLeft := loadStepRight := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		load := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequence" Id="{b6930bdc-6b37-4ccd-8367-4e887d0b238c}" FolderPath="Loading\">
      <Declaration><![CDATA[METHOD loadingSequence : BOOL
VAR_IN_OUT
	robot : RobotA21;
	table : GenericStagingTable;
	suctions : ARRAY[*] OF SuctionPad;
	loadStep : INT;
	slot : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
IF material = '' THEN
	robot.clearCommand();
	loadingSequence := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0: //wait for robot
		robot.clearCommand();
		
		IF robot.Ready THEN
			loadStep := 10;
			slot := 0;
		END_IF
		
	10: //grab from table
		IF slot < 1 AND_THEN NOT table.findSlot(materialID := material, atSlot => slot) THEN 
			fail := TRUE;
			RETURN;
		END_IF
		
		IF NOT table.isOccupied(i := slot) AND table.getSlot(i := slot) <> '' THEN //move from table to robot gripper
			robot.HoldMaterial := table.getSlot(i := slot);
			table.remove(i := slot, materialID => );
		END_IF
		
		IF robot.Done THEN
			loadStep := COMPLETE;
			RETURN;
		ELSIF robot.materialAtHoldingPosition >= 1 AND robot.materialAtHoldingPosition <= 8 THEN
			loadStep := 20;
			RETURN;
		END_IF
		
		CASE surfaceID OF
			Surface.TOP: 					robot.setGroup(group := 1, value := A21.LOAD_BUNK_TOP); 
			Surface.LEFT, Surface.RIGHT: 	robot.setGroup(group := 1, value := A21.LOAD_BUNK_SIDE);
			Surface.BOTTOM: 				robot.setGroup(group := 1, value := A21.LOAD_BUNK_BOTTOM);
		END_CASE
		robot.setGroup(group := 2, value := slot); 
			
	20: //place to insertion
		IF robotLeft.Done THEN
			loadStep := COMPLETE;
			RETURN;
		END_IF
		
		robot.setGroup(group := 9, value := robot.materialAtHoldingPosition);
		
		IF robot.materialAtHoldingPosition > 0 AND robot.HoldMaterial <> '' THEN //move from gripper to insertion
			IF loadedMaterials[surfaceID] = '' THEN //transfer to insertion as is
				loadedMaterials[surfaceID] := robot.HoldMaterial;
			ELSE //join with existing material using underscore _
				loadedMaterials[surfaceID] := JoinStrings(loadedMaterials[surfaceID], robot.HoldMaterial, '_');
			END_IF
			robot.HoldMaterial := '';
		END_IF
		
		CASE surfaceID OF
			Surface.TOP, Surface.BOTTOM:
				SetSuctions(suctions, TRUE (*robot.materialAtHoldingPosition = 1 OR robot.materialAtHoldingPosition = 4*));
				
			Surface.LEFT, Surface.RIGHT:
				SetSuctions(suctions, TRUE (*robot.materialAtHoldingPosition = 2 OR robot.materialAtHoldingPosition = 3*));
				(*
				FOR i:=LOWER_BOUND(suctions, 1) TO UPPER_BOUND(suctions, 1) BY 1 DO
					
					IF i < UPPER_BOUND(suctions, 1)/2 THEN
						suctions[i].enable := robot.materialAtHoldingPosition = 2; //enable upper half suctions
					ELSE
						suctions[i].enable := robot.materialAtHoldingPosition = 3; //enable lower half suctions
					END_IF

				END_FOR
				*)
		END_CASE
	
	COMPLETE:
		robot.clearCommand();
		loadingSequence := TRUE;
		loadStep := 0;
		(*
		//check insertion quality
		IF InsertionQuality(suctions := suctions, insertionMaterial := loadedMaterials[surfaceID], recipeMaterial := material) THEN
			loadingSequence := TRUE;
		ELSE
			//recovery - restage a new bunk to <slot> and reload
			fail := TRUE;
			//loadStep := 0;
			//SetSuctions(suctionPads := suctions, state := FALSE);
		END_IF
		*)
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="splitCombinedMaterials" Id="{253040a1-6112-4088-b271-b912c88ba0a3}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD splitCombinedMaterials : BOOL
VAR_IN_OUT
	materialID : STRING;
	splitMaterial : STRING;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindAndSplitChar(
	sSeparatorChar:= '_', 
	pSrcString:= ADR(materialID), 
	
	pLeftString:= ADR(splitMaterial), 
	nLeftSize:= SIZEOF(splitMaterial), 
	
	pRightString:= ADR(materialID), 
	nRightSize:= SIZEOF(materialID), 
	
	bSearchFromRight:= FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="stage" Id="{394ea3b0-a477-4afc-b551-89e83b2984a7}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD stage : BOOL
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
(*
IF NOT robotLeft.operational OR NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF

IF NOT (robotLeft.reserve(reserveRequest := sectionID) AND robotRight.reserve(reserveRequest := sectionID)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = sectionID AND robotRight.tool = sectionID) THEN //robots have wrong tool
	changeRobotsEOAT(robot := robotLeft, targetTool := sectionID); //wait for robots to finish changing tools
	changeRobotsEOAT(robot := robotRight, targetTool := sectionID);
	RETURN;
END_IF
*)

CASE stageSet OF
	0: //create staging template
		IF generateStagingTemplate() THEN
			stageSet := 10;
		END_IF
	
	10: //staging sequence
		IF //stagingSequenceLeft(fail => failLeft) AND stagingSequenceRight(fail => failRight)
			
			stagingSequence(				
				robot:= robotLeft, 
				template:= stagingTemplateLeft,
				table:= stagingTableLeft,  
				magazine:= magazineLeft, 
				stageStep:= stageStepLeft, 
				iSlot:= iSlotLeft,
				fail=> failLeft)
			(*
			AND
			
			stagingSequence(
				robot:= robotRight, 
				template:= stagingTemplateRight, 
				table:= stagingTableRight, 
				magazine:= magazineRight, 
				stageStep:= stageStepRight, 
				iSlot:= iSlotRight,
				fail=> )
			*)
		THEN
			stageStepLeft := stageStepRight := 0;
			iSlotLeft := iSlotRight := 0;
			
			stageSet := COMPLETE;
		END_IF
		
	COMPLETE:
		stagingTemplateRight.clear(); //clear the staging templates
		stagingTemplateLeft.clear();
		
		robotLeft.release(sectionID); //release the robots
		robotRight.release(sectionID);
		
		stageSet := 0;
		stage := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="stagingSequence" Id="{1cf9906f-6300-40ae-8532-5d125199aeba}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD stagingSequence : BOOL
VAR_IN_OUT
	robot : RobotA21;
	template : GenericStagingTable;
	table : GenericStagingTable;
	magazine : GenericSkidMagazine;
	stageStep : INT;
	iSlot : INT;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	magazineColumn : INT; //valid positions start from 1
END_VAR
VAR CONSTANT
	(*
	WIP : INT := 0;
	PASSED : INT := 1;
	FAILED : INT := 2;
	*)
	suctionDistance : INT := 10;
END_VAR
VAR_STAT
	tempMaterial : STRING;
	tempOccupied : BOOL;
	temp : BOOL;
	
	adr1, adr2 : PVOID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
{warning disable C0195}
iSlot := MAX(1, iSlot); //ensures iSlot is at least 1

IF //staging table is full or matches staging template
	table.isFull() OR iSlot > 10 OR 
	//MEMCMP(ADR(table.slots), ADR(template.slots), table.numSlots * SIZEOF(STRING)) = 0
	MEMCMP(
		ADR(table.slots), 
		ADR(template.slots), 
		SIZEOF(table.getSlot(i := 1)) * (1 + UPPER_BOUND(table.slots, 1) - LOWER_BOUND(table.slots, 1)) ) = 0
THEN
	robot.clearCommand();
	robotLeft.release(sectionID);
	stagingSequence := TRUE;
	RETURN;
	
ELSIF template.getSlot(i := iSlot) = '' THEN
	iSlot := iSlot + 1;
	RETURN;

ELSIF robot.offline THEN
	fail := TRUE;
	RETURN;
	
ELSIF //robot in used by other section or has wrong tool
	NOT robot.reserve(reserveRequest := sectionID) OR_ELSE
	(robot.tool <> SectionID AND_THEN robot.changeEOAT(targetTool := sectionID))
THEN
	RETURN;
END_IF

//follow the template as is
CASE stageStep OF
	0:
		robot.clearCommand();
		IF robot.Ready THEN
			stageStep := 10;
		END_IF
		
	10: //grab from magazine
		tempMaterial := template.getSlot(i := iSlot, errorBounds => temp);
		IF NOT magazine.findSlot(materialID := template.getSlot(i := iSlot, errorBounds => temp), atSlot => magazineColumn) THEN
			fail := TRUE;
			RETURN;
		END_IF
		
		IF robot.eoatDistance < suctionDistance THEN //robot is grabbing material
			robot.HoldMaterial := magazine.getSlot(i := magazineColumn);
		END_IF
		
		IF robot.Done THEN
			stageStep := COMPLETE;
			RETURN;
		ELSIF table.isOccupied(iSlot) THEN //wood bunk registered on table
			stageStep := 20;
			RETURN;
		END_IF
		
		(*
		IF table.isOccupied(iSlot) THEN //wood bunk registered on table
			IF table.slots[iSlot] = '' AND robot.HoldMaterial <> '' THEN //robot is holding wood bunk
				table.place(i := iSlot, materialID := robot.HoldMaterial); //set wood bunk down on table
				robot.HoldMaterial := '';
			END_IF
		ELS
		IF robot.eoatDistance < suctionDistance THEN //robot is grabbing material
			robot.HoldMaterial := magazine.slots[magazineColumn];
		END_IF
		*)
		(*
		IF robot.Done THEN
			stageStep := COMPLETE;
			RETURN;
		END_IF
		*)
		robot.setGroup(group := 1, value := A21.STAGE_BUNK);
		robot.setGroup(group := 2, value := magazineColumn);
		robot.setGroup(group := 3, value := iSlot);
	
	20: //place to table
		IF
			table.isOccupied(iSlot) AND //staging table slot is occupied
			table.getSlot(iSlot) = '' AND //staging table has not recorded a bunk
			robot.HoldMaterial <> '' //robot is carrying a bunk
		THEN
			table.place(i := iSlot, materialID := robot.HoldMaterial);
			robot.HoldMaterial := '';
		END_IF
		
		IF robot.Done THEN
			stageStep := COMPLETE;
			RETURN;
		END_IF
	
	COMPLETE:
		//if staging is successful, stage next slot
		//otherwise, repeat slot
		robot.clearCommand();
		IF table.isOccupied(iSlot) AND table.getSlot(i := iSlot) = template.getSlot(i := iSlot) THEN
			iSlot := iSlot + 1;
		END_IF
		stageStep := 0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="WoodBunkEx">
      <LineId Id="5471" Count="1" />
      <LineId Id="5475" Count="9" />
      <LineId Id="5487" Count="6" />
      <LineId Id="5495" Count="62" />
      <LineId Id="5729" Count="1" />
      <LineId Id="5732" Count="1" />
      <LineId Id="5558" Count="0" />
      <LineId Id="5734" Count="2" />
      <LineId Id="5559" Count="77" />
      <LineId Id="5728" Count="0" />
      <LineId Id="5637" Count="1" />
      <LineId Id="4805" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.callLocalModules">
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="6" Count="9" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="21" Count="6" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.createStagingArrayLeft">
      <LineId Id="12" Count="3" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="46" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.createStagingArrayRight">
      <LineId Id="12" Count="3" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.generateStagingTemplate">
      <LineId Id="400" Count="1" />
      <LineId Id="441" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="402" Count="7" />
      <LineId Id="411" Count="6" />
      <LineId Id="419" Count="0" />
      <LineId Id="422" Count="6" />
      <LineId Id="421" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="429" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.load">
      <LineId Id="1193" Count="0" />
      <LineId Id="1081" Count="16" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1102" Count="90" />
      <LineId Id="278" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.loadingSequence">
      <LineId Id="1313" Count="79" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1393" Count="0" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1394" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.splitCombinedMaterials">
      <LineId Id="15" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.stage">
      <LineId Id="895" Count="0" />
      <LineId Id="820" Count="11" />
      <LineId Id="887" Count="0" />
      <LineId Id="832" Count="6" />
      <LineId Id="891" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="840" Count="2" />
      <LineId Id="888" Count="0" />
      <LineId Id="844" Count="1" />
      <LineId Id="848" Count="7" />
      <LineId Id="903" Count="0" />
      <LineId Id="856" Count="1" />
      <LineId Id="860" Count="0" />
      <LineId Id="899" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="863" Count="20" />
      <LineId Id="657" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx.stagingSequence">
      <LineId Id="382" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="384" Count="2" />
      <LineId Id="487" Count="3" />
      <LineId Id="387" Count="4" />
      <LineId Id="521" Count="0" />
      <LineId Id="395" Count="13" />
      <LineId Id="411" Count="4" />
      <LineId Id="417" Count="4" />
      <LineId Id="553" Count="0" />
      <LineId Id="423" Count="55" />
      <LineId Id="584" Count="0" />
      <LineId Id="479" Count="2" />
      <LineId Id="583" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>