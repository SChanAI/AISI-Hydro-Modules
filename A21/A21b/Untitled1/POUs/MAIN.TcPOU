<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{f31366c8-7465-4414-aaf4-fb935af985c5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	execute : BOOL;
	manualMode : BOOL := TRUE;
END_VAR
VAR_OUTPUT
	robotLeft, robotRight : Robot;
	
	skidLeft, skidRight : MaterialStorage;
	
	stagingTemplateLeft, stagingTemplateRight : WoodBunkTable;
	stagingTableLeft, stagingTableRight : WoodBunkTable;
	magazineLeft, magazineRight : MaterialStorage;
	
	strapper : StrapMachine;
	
	insertionLeft, insertionRight : PneumaticInsertionEIP;	
	insertionBottom : AirPiston;
	
	topSuction : ARRAY[1..3] OF SuctionPad;
	leftSuction : ARRAY[1..4] OF SuctionPad;
	rightSuction : ARRAY[1..4] OF SuctionPad; 
	bottomSuction : ARRAY[1..2] OF SuctionPad;
	
	toolStorageLeft, toolStorageRight : A21ToolStorage;
END_VAR
VAR
	//these latches are only temporary to prevent SMC sliders from overshooting the inner limit sensor
	//to be removed when replaced with pressure sensors
	latchLeft, latchRight, latchBottom : BOOL;
	manualSuctionEnable : BOOL;
	
	robotLeftOutputs, robotRightOutputs : ARRAY[1..50] OF INT;
	
	demoPairWB : PositionMaterials := (
		position := 0,
		top := 'WDW20',
		left := 'WDS14',
		right := 'WDS14',
		bottom := 'WDB20');
		
	demoPairCIP : PositionMaterials := (
		position := 0,
		top := 'CIP54',
		bottom := 'CIP18');
	
	demoHeight : REAL := 600; //600mm, 60cm
	
	sectionID : SectionEnum := SectionEnum.WOOD_BUNK;
	
	step : (IDLE, LOAD_CIP, STAGING, LOAD_WB, PUSH, STRAP, RELEASE, COMPLETE := 1050);
	ready : BOOL;
	
	loadSet : INT;
	loadStepLeft, loadStepRight : INT;
	
	stageSet : INT;	
	stageStepLeft, stageStepRight : INT;
	iStagingSlotLeft, iStagingSlotRight : INT;
	
	i : INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[setup();
hardwareCall();

IF NOT ready THEN
	ready :=
		insertionLeft.homingSequence() AND
		insertionRight.homingSequence(); //AND
		//insertionBottom.homingSequence();
	RETURN;
END_IF


CASE step OF
	IDLE:	
		IF execute THEN
			execute := FALSE;
			step := LOAD_WB;
		END_IF
	
	LOAD_CIP:
		IF loadCIP(pair:= demoPairWB) THEN
			step := STAGING;
		END_IF
		
		IF manualMode AND_THEN execute THEN
			execute := FALSE;
			step := STAGING;
		END_IF
		
	STAGING:
		IF stage() THEN			
			step := LOAD_CIP;
		END_IF
		
		IF manualMode AND_THEN execute THEN
			execute := FALSE;
			step := LOAD_WB;
		END_IF
		
	LOAD_WB:
		IF loadWB(pair := demoPairWB) THEN
			step := STRAP;
		END_IF
		
		IF manualSuctionEnable THEN
			EnableSuctions(topSuction);
			EnableSuctions(leftSuction);
			EnableSuctions(rightSuction);
			//EnableSuctions(bottomSuction);
		END_IF
		
		IF manualSuctionEnable AND manualMode AND_THEN execute THEN
			manualSuctionEnable := FALSE;
			
			execute := FALSE;
			step := PUSH;
		END_IF
		
	PUSH:
		IF 
			insertionLeft.sliderPos <> demoHeight/2 OR 
			insertionRight.sliderPos <> demoHeight/2 //OR 
			//NOT insertionBottom.contact
		THEN
			insertionLeft.slideAbsolute(demoHeight/2);
			insertionRight.slideAbsolute(demoHeight/2);
			RETURN;
		END_IF
		(*
		insertionLeft.press();
		insertionRight.press();
		//insertionBottom.extend();
		*)
		IF NOT latchLeft THEN //stop pressing if inner limit pulsed
			insertionLeft.press();
		ELSIF insertionLeft.screw.innerLimit THEN
			latchLeft := TRUE;
		END_IF
		
		IF NOT latchRight THEN //stop pressing if inner limit pulsed
			insertionRight.press();
		ELSIF insertionRight.screw.innerLimit THEN
			latchRight := TRUE;
		END_IF
		
		(*
		IF NOT latchBottom THEN //stop pressing if inner limit pulsed
			insertionBottom.extend();
		ELSIF insertionBottom.innerLimit THEN
			latchBottom := TRUE;
		END_IF
		*)
		
		IF insertionBottom.contact AND insertionLeft.contact AND insertionRight.contact THEN
			step := STRAP;
		END_IF
		
		IF manualMode AND_THEN execute THEN
			latchLeft := FALSE;
			execute := FALSE;
			step := STRAP;
		END_IF
		
	STRAP:
		//possible requirement - release left, right, bottom suction here
		DisableSuctions(leftSuction);
		DisableSuctions(rightSuction);
		DisableSuctions(bottomSuction);
		
		IF strapper.done THEN
			step := RELEASE;
			RETURN;
		END_IF
		
		IF NOT strapper.busy AND NOT strapper.error THEN
			strapper.strap();
		END_IF
		
		(*
		IF manualMode AND_THEN execute THEN
			execute := FALSE;
			step := RELEASE;
		END_IF
		*)
		
	RELEASE: //release command
		DisableSuctions(topSuction);
		
		insertionLeft.release();
		insertionRight.release();
		//insertionBottom.retract();
		
		insertionLeft.slideAbsolute(0);
		insertionRight.slideAbsolute(0);
		insertionBottom.retract();
		
		(*
		IF NOT insertionLeft.home THEN
			insertionLeft.slideAbsolute(0);
			insertionLeft.release();
		END_IF
		
		IF NOT insertionRight.home THEN
			insertionRight.slideAbsolute(0);
			insertionRight.release();
		END_IF
		
		IF NOT insertionBottom.home THEN
			insertionBottom.slideOut();
		END_IF
		*)
		(*
		IF insertionLeft.home AND insertionRight.home AND insertionBottom.home THEN
			step := COMPLETE;
		END_IF
		*)
		
		IF insertionLeft.screw.home (*AND_THEN manualMode AND_THEN execute*) THEN
			execute := FALSE;
			step := COMPLETE;
		END_IF
	
	COMPLETE:
		//reset everything
		step := IDLE;
		
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Loading" Id="{6998e9bf-e2b9-4fd9-897f-fda9aa3bdaab}" />
    <Folder Name="Staging" Id="{df129403-abf4-453c-addd-f6dd4ee3c4b1}" />
    <Folder Name="z_Obsolete" Id="{79b96cb1-e329-4a11-8a3d-4c45244160c4}" />
    <Method Name="changeRobotsEOAT" Id="{71a414a6-260d-4ed7-9b91-4169239414f1}">
      <Declaration><![CDATA[METHOD changeRobotsEOAT : BOOL
VAR_INPUT
	targetTool : SectionEnum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF robotLeft.tool <> sectionID THEN
	MEMSET(ADR(robotLeftOutputs), 0, SIZEOF(robotLeftOutputs));
	robotLeftOutputs[1] := A21.TOOL_CHANGE_CHIPBOARD;
	robotLeft.setParamsAndWait(robotLeftOutputs);
END_IF

IF robotRight.tool <> sectionID THEN
	MEMSET(ADR(robotRightOutputs), 0, SIZEOF(robotRightOutputs));
	robotRightOutputs[1] := A21.TOOL_CHANGE_CHIPBOARD;
	robotRight.setParamsAndWait(robotRightOutputs);
END_IF

changeRobotsEOAT := robotLeft.tool = sectionID AND robotRight.tool = sectionID;]]></ST>
      </Implementation>
    </Method>
    <Method Name="createStagingTemplate" Id="{7fe7b744-7294-4b6c-b036-1426eaceb21a}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD PROTECTED createStagingTemplate : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stagingTemplateLeft.autofill(demoPairWB.top);
stagingTemplateLeft.autofill(demoPairWB.left);

stagingTemplateRight.autofill(demoPairWB.right);
stagingTemplateRight.autofill(demoPairWB.bottom);

createStagingTemplate := TRUE;

(*
FOR i:=0 TO GVL.maxPairs BY 1 DO //iterate through all pairs and autofill the template
	//LEFT TABLE
	remainingMaterial := materialsArr[i].top;
	WHILE FIND(remainingMaterial, '_') > 0 DO //until no underscore found
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateLeft.autofill(splitMaterial);
	END_WHILE
	stagingTemplateLeft.autofill(remainingMaterial);
	
	remainingMaterial := materialsArr[i].left;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateLeft.autofill(splitMaterial);
	END_WHILE
	stagingTemplateLeft.autofill(remainingMaterial);
	
	//RIGHT TABLE
	remainingMaterial := materialsArr[i].right;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateRight.autofill(splitMaterial);
	END_WHILE
	stagingTemplateRight.autofill(remainingMaterial);
	
	remainingMaterial := materialsArr[i].bottom;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateRight.autofill(splitMaterial);
	END_WHILE
	stagingTemplateRight.autofill(remainingMaterial);
END_FOR
createStagingTemplate := TRUE;
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="hardwareCall" Id="{ae27e4e1-f18c-46c6-a88d-05763e2b1498}">
      <Declaration><![CDATA[METHOD hardwareCall : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[robotLeft();
robotRight();

skidLeft();
skidRight();

stagingTableLeft();
stagingTableRight();

skidLeft();
skidRight();

magazineLeft();
magazineRight();

stagingTableLeft();
stagingTableRight();

strapper();

insertionLeft();
insertionRight();
insertionBottom();

stagingTemplateLeft();
stagingTemplateRight();]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadCIP" Id="{4d48d146-da99-4898-b32c-d988fd277adc}">
      <Declaration><![CDATA[METHOD loadCIP : BOOL
VAR_INPUT
	pair : REFERENCE TO PositionMaterials;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT robotLeft.operational AND NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF

IF NOT (robotLeft.reserve(SectionEnum.CHIPBOARD) AND robotRight.reserve(SectionEnum.CHIPBOARD)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = SectionEnum.CHIPBOARD AND robotRight.tool = SectionEnum.CHIPBOARD) THEN //robots have wrong tool
	changeRobotsEOAT(SectionEnum.CHIPBOARD); //wait for robots to finish changing tools
	RETURN;
END_IF


CASE loadSet OF
	0: //demo only - only top chipboard loaded by left robot
		IF 
			loadingSequenceCIP(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				storage:= skidLeft, 
				loadStep:= loadStepLeft, 
				surfaceID:= Surface.TOP,
				material:= pair.top, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := 10;
		END_IF
		
	10: //recovery
		IF robotLeft.operational AND NOT robotRight.operational THEN //left ok, right fail
			IF
				loadingSequenceCIP(
					actingRobot:= robotLeft, 
					robotOutputs:= robotLeftOutputs, 
					storage:= skidLeft, 
					loadStep:= loadStepLeft, 
					surfaceID:= Surface.BOTTOM,
					material:= pair.top, 
					fail=> ) //load bottom with left robot
			THEN
				step := COMPLETE;
			END_IF
			
		ELSIF NOT robotLeft.operational AND robotRight.operational THEN //left fail, right ok
			IF
				loadingSequenceCIP(
					actingRobot:= robotRight, 
					robotOutputs:= robotRightOutputs, 
					storage:= skidRight, 
					loadStep:= loadStepRight, 
					surfaceID:= Surface.TOP,
					material:= pair.bottom, 
					fail=> ) //load top with right robot
			THEN
				step := COMPLETE;
			END_IF
			
		END_IF
		
	COMPLETE:
		loadSet := 0;
		loadStepLeft := loadStepRight := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		loadCIP := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequenceCIP" Id="{dab34edb-3da5-4404-8c49-3d0bd468a2d2}" FolderPath="Loading\">
      <Declaration><![CDATA[METHOD loadingSequenceCIP : BOOL
VAR_IN_OUT
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	storage : MaterialStorage;
	loadStep : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	slot : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF material = '' THEN
	loadingSequenceCIP := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0:
		IF NOT storage.findSlot(materialID := material, atSlot => slot) THEN
			fail := TRUE;
			RETURN;
		END_IF
		
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		robotOutputs[1] := A21.GET_CHIPBOARD_FROM_SKID;
		robotOutputs[2] := slot;
		
		CASE surfaceID OF
			Surface.TOP:
				IF actingRobot.setParamsAndWait(robotOutputs) THEN
					loadStep := 10;
				END_IF
				
			Surface.BOTTOM:
				//lower conveyor
				IF actingRobot.setParamsAndWait(robotOutputs) (*AND conveyor lowered*) THEN
					loadStep := 10;
				END_IF
			
		END_CASE
		
	10:
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		CASE surfaceID OF
			Surface.TOP: 					robotOutputs[1] := A21.PLACE_CHIPBOARD_TO_TOP;
			Surface.BOTTOM: 				robotOutputs[1] := A21.PLACE_CHIPBOARD_TO_BOTTOM;
		END_CASE
		robotOutputs[2] := slot;
		
		IF actingRobot.setParamsAndWait(robotOutputs) THEN
			loadStep := 10;
		END_IF
		
	COMPLETE:
		actingRobot.release(sectionID);
		loadingSequenceCIP := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequenceWB" Id="{ec5e74a4-d8f7-4a78-89ca-cd705faa47d2}" FolderPath="Loading\">
      <Declaration><![CDATA[METHOD loadingSequenceWB : BOOL
VAR_IN_OUT
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	stagingTable : WoodBunkTable;
	suctions : ARRAY[*] OF SuctionPad;
	loadStep : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	slot : INT;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF material = '' THEN
	loadingSequenceWB := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0:
		IF NOT stagingTable.findSlot(materialID := material, atSlot => slot) THEN
			fail := TRUE;
			RETURN;
		END_IF
		
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		CASE surfaceID OF
			Surface.TOP: 					robotOutputs[1] := A21.LOAD_BUNK_TO_TOP;
			Surface.LEFT, Surface.RIGHT: 	robotOutputs[1] := A21.LOAD_BUNK_TO_SIDE;
			Surface.BOTTOM: 				robotOutputs[1] := A21.LOAD_BUNK_TO_BOTTOM;
		END_CASE
		robotOutputs[2] := slot;
		
		IF actingRobot.setParamsAndWait(robotOutputs) THEN
			loadStep := COMPLETE;
		END_IF
		
	COMPLETE:
		FOR i:=LOWER_BOUND(suctions, 1) TO UPPER_BOUND(suctions, 1) BY 1 DO
			suctions[i].enable := TRUE;
		END_FOR
		
		loadingSequenceWB := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadWB" Id="{b6e713a8-dc8d-419f-844e-f7d0d4b22dfa}">
      <Declaration><![CDATA[METHOD PROTECTED loadWB : BOOL
VAR_INPUT
	pair : REFERENCE TO PositionMaterials;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT robotLeft.operational OR NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF

IF NOT (robotLeft.reserve(SectionEnum.WOOD_BUNK) AND robotRight.reserve(SectionEnum.WOOD_BUNK)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = SectionEnum.WOOD_BUNK AND robotRight.tool = SectionEnum.WOOD_BUNK) THEN //robots have wrong tool
	changeRobotsEOAT(SectionEnum.WOOD_BUNK); //wait for robots to finish changing tools
	RETURN;
END_IF

CASE loadSet OF
	0: //top and bottom
		IF 
			loadingSequenceWB(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				stagingTable:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				suctions:= topSuction,
				surfaceID:= Surface.TOP, 
				material:= pair.top, 
				fail=> )
			AND
			loadingSequenceWB(
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs, 
				stagingTable:= stagingTableRight, 
				loadStep:= loadStepRight, 
				suctions:= bottomSuction,
				surfaceID:= Surface.BOTTOM, 
				material:= pair.bottom, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := 10;
		END_IF
		
	10: //sides
		IF
			loadingSequenceWB(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				stagingTable:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				suctions:= leftSuction,
				surfaceID:= Surface.LEFT, 
				material:= pair.left, 
				fail=> )
			AND
			loadingSequenceWB(
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs, 
				stagingTable:= stagingTableRight, 
				loadStep:= loadStepRight, 
				suctions:= rightSuction,
				surfaceID:= Surface.RIGHT, 
				material:= pair.right, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := COMPLETE;
		END_IF
		
	COMPLETE:
		loadSet := 0;
		loadStepLeft := loadStepRight := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		loadWB := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="setup" Id="{0ba728b9-6522-4c82-81e3-44efce8fc95c}">
      <Declaration><![CDATA[METHOD PRIVATE setup : BOOL
VAR
	iWoodBunkSlot : WoodBunk := 1;
	iChipboardSlot : Chipboard := 1;
	
	slotsArr : ARRAY[1..GVL.maxQueue] OF STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iWoodBunkSlot:=1 TO WoodBunk.size-1 BY 1 DO
	slotsArr[iWoodBunkSlot] := TO_STRING(iWoodBunkSlot);
END_FOR
magazineLeft.setupSlots(slotsArr);
magazineRight.setupSlots(slotsArr);

FOR iChipboardSlot:=1 TO Chipboard.size-1 BY 1 DO
	slotsArr[iChipboardSlot] := TO_STRING(iChipboardSlot);
END_FOR
skidLeft.setupSlots(slotsArr);
skidRight.setupSlots(slotsArr);


insertionLeft.enable := insertionRight.enable := insertionBottom.bEnable := TRUE;

setup := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="stage" Id="{413ca9c3-a808-4782-b740-b91ebf3df60f}">
      <Declaration><![CDATA[METHOD stage : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//robot reservation needs to be constantly checked so it is not in the state machine
IF NOT (robotLeft.reserve(sectionID) AND robotRight.reserve(sectionID)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = SectionEnum.WOOD_BUNK AND robotRight.tool = SectionEnum.WOOD_BUNK) THEN //robots have wrong tool
	changeRobotsEOAT(SectionEnum.WOOD_BUNK); //wait for robots to finish changing tools
	RETURN;
END_IF

CASE stageSet OF
	0: //create staging template
		IF createStagingTemplate() THEN
			step := 10;
		END_IF
	
	10: //staging sequence
		IF
			stagingSequence(
				template:= stagingTemplateLeft, 
				magazine:= magazineLeft, 
				table:= stagingTableLeft, 
				actingStagingSlot:= iStagingSlotLeft,
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs,
				actingStep:= stageStepLeft, 
				fail=> )
				
			AND
			stagingSequence(
				template:= stagingTemplateRight, 
				magazine:= magazineRight, 
				table:= stagingTableRight, 
				actingStagingSlot:= iStagingSlotRight,
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs,
				actingStep:= stageStepRight, 
				fail=> )
		THEN
			stageStepLeft := stageStepRight := 0;
			iStagingSlotLeft := iStagingSlotRight := 0;
			
			stageSet := COMPLETE;
		END_IF
		
	COMPLETE:
		stagingTemplateRight.clear(); //clear the staging templates
		stagingTemplateLeft.clear();
		
		robotLeft.release(sectionID); //release the robots
		robotRight.release(sectionID);
		
		stageSet := 0;
		stage := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="stageLeft" Id="{3b8fe327-e7eb-4f4b-b513-70d48c9a8543}" FolderPath="z_Obsolete\">
      <Declaration><![CDATA[METHOD stageLeft : BOOL
VAR_IN_OUT
	template : WoodBunkTable;
	magazine : MaterialStorage;
	table : WoodBunkTable;
	actingStagingSlot : INT;
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	actingStep : INT;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	finished : BOOL;
	
	slot : INT;
	templateArr : POINTER TO STRING;
	//iSlot : REFERENCE TO INT; 
END_VAR
VAR CONSTANT
	WIP : INT := 0;
	PASSED : INT := 1;
	FAILED : INT := 2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF table.isFull() OR actingStagingSlot > 10 THEN
	stageLeft := TRUE;
	RETURN;
END_IF

templateArr := template.getSlotsAsArray();

//follow the template as is
IF NOT magazine.findSlot(materialID:= templateArr[actingStagingSlot], atSlot => slot) THEN
	fail := TRUE;
	RETURN;
END_IF

IF actingStep > 0 THEN
	finished := actingRobot.setParamsAndWait(robotOutputs);
END_IF

CASE actingStep OF		
	0:
		IF actingRobot.inputs[5].10 THEN //in position for inspection
			robotOutputs[4] := PASSED;
			actingStep := 30;
		END_IF
		
	COMPLETE:
		IF finished THEN
			actingStep := 0;
		END_IF
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="stageRight" Id="{27442b6e-36aa-485b-84ba-8788912b7a2c}" FolderPath="z_Obsolete\">
      <Declaration><![CDATA[METHOD stageRight : BOOL
VAR_IN_OUT
	template : WoodBunkTable;
	magazine : MaterialStorage;
	table : WoodBunkTable;
	actingStagingSlot : INT;
	actingRobot : Robot;
	actingStep : INT;
END_VAR
VAR_INPUT
	camera : INT;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	finished : BOOL;
	robotOutputs : POINTER TO INT;
	
	slot : INT;
	templateArr : POINTER TO STRING;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF table.isFull() OR actingStagingSlot > 10 THEN
	stageRight := TRUE;
	RETURN;
END_IF

templateArr := template.getSlotsAsArray();

//follow the template as is
IF NOT magazine.findSlot(materialID:= templateArr[actingStagingSlot], atSlot => slot) THEN
	fail := TRUE;
	RETURN;
END_IF

IF actingStep > 0 THEN
	finished := actingRobot.setCommandAndWait(A21.STAGE_BUNK, slot, actingStagingSlot, 0);
END_IF

CASE actingStep OF
	0: //command
		IF actingRobot.inputs[5].10 THEN
			actingStep := 10;
		END_IF
		
	10: //send inspection data
		tempInspectionSuite.frame.MaterialID := templateArr[actingStagingSlot];
		tempInspectionSuite.frame.CheckFor := 'ORIENTATION';
		tempInspectionSuite.frame.CameraNumber := camera;
	
		CreateJsonDocumentAuto(
			visionFrameData:= tempInspectionSuite.frame, 
			jsonDocument=> tempInspectionSuite.json);
		
		MEMCPY( //data = json
			ADR(tempInspectionSuite.data), 
			ADR(tempInspectionSuite.json), 
			MIN( SIZEOF(tempInspectionSuite.data), SIZEOF(tempInspectionSuite.json) ));
			
		TcpServer1Vision.queue(tempInspectionSuite.data);
		
		actingStep := 20;
	
	20: //fetch inspection data and parse
		actingRobot.setCommandAndWait(A21.STAGE_BUNK, slot, actingStagingSlot, 0);
		robotOutputs[11] := 0;
		
		IF NOT FrameIsValid(actingFrame) THEN
			RETURN;
		END_IF
		
		IF actingFrame.SuccessFlag = 1 THEN
			robotOutputs[11] := 1;
		ELSE
			robotOutputs[11] := 2;
		END_IF
		step := 30;
		
	30: //finish command
		IF finished THEN
			IF actingFrame.SuccessFlag = 1 THEN
				actingStagingSlot := actingStagingSlot + 1;
			END_IF
			
			actingStep := 0; //stage next
		END_IF
		
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="stagingSequence" Id="{a405d3c7-f8a4-4bcd-a99a-948da7c9242e}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD stagingSequence : BOOL
VAR_IN_OUT
	template : WoodBunkTable;
	magazine : MaterialStorage;
	table : WoodBunkTable;
	actingStagingSlot : INT;
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	actingStep : INT;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	finished : BOOL;
	slot : INT;
END_VAR
VAR CONSTANT
	WIP : INT := 0;
	PASSED : INT := 1;
	FAILED : INT := 2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF
	table.isFull() OR actingStagingSlot > 10 OR //table full
	MEMCMP(ADR(table.slots), ADR(template.slots), SIZEOF(table.slots)) = 0 //table matches template
THEN
	stagingSequence := TRUE;
	RETURN;
END_IF

//follow the template as is
IF NOT magazine.findSlot(materialID:= template.slots[actingStagingSlot], atSlot => slot) THEN
	fail := TRUE;
	RETURN;
END_IF

IF actingStep > 0 THEN
	finished := actingRobot.setParamsAndWait(robotOutputs);
END_IF

CASE actingStep OF		
	0:
		IF actingRobot.inputs[5].10 THEN //in position for inspection
			robotOutputs[4] := PASSED;
			actingStep := 30;
		END_IF
		
	30:
		IF finished THEN
			actingStep := COMPLETE;
		END_IF
		
	COMPLETE:
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		actingStagingSlot := actingStagingSlot + 1;
		//stagingSequence := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="1621" Count="61" />
      <LineId Id="1796" Count="0" />
      <LineId Id="1684" Count="7" />
      <LineId Id="1797" Count="0" />
      <LineId Id="1693" Count="5" />
      <LineId Id="1784" Count="0" />
      <LineId Id="1786" Count="3" />
      <LineId Id="1798" Count="1" />
      <LineId Id="1804" Count="0" />
      <LineId Id="1800" Count="3" />
      <LineId Id="1785" Count="0" />
      <LineId Id="1699" Count="0" />
      <LineId Id="1783" Count="0" />
      <LineId Id="1701" Count="2" />
      <LineId Id="1705" Count="8" />
      <LineId Id="1715" Count="3" />
      <LineId Id="1806" Count="0" />
      <LineId Id="1721" Count="6" />
      <LineId Id="1729" Count="8" />
      <LineId Id="1807" Count="0" />
      <LineId Id="1743" Count="3" />
      <LineId Id="1809" Count="1" />
      <LineId Id="1747" Count="0" />
      <LineId Id="1812" Count="1" />
      <LineId Id="1748" Count="14" />
      <LineId Id="1814" Count="0" />
      <LineId Id="1763" Count="2" />
      <LineId Id="1815" Count="0" />
      <LineId Id="1767" Count="9" />
      <LineId Id="167" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.changeRobotsEOAT">
      <LineId Id="10" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.createStagingTemplate">
      <LineId Id="259" Count="40" />
      <LineId Id="240" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.hardwareCall">
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadCIP">
      <LineId Id="87" Count="17" />
      <LineId Id="187" Count="6" />
      <LineId Id="113" Count="0" />
      <LineId Id="124" Count="4" />
      <LineId Id="163" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="195" Count="7" />
      <LineId Id="218" Count="2" />
      <LineId Id="203" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="206" Count="7" />
      <LineId Id="222" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="154" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadingSequenceCIP">
      <LineId Id="25" Count="4" />
      <LineId Id="58" Count="40" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadingSequenceWB">
      <LineId Id="322" Count="28" />
      <LineId Id="352" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadWB">
      <LineId Id="532" Count="1" />
      <LineId Id="536" Count="2" />
      <LineId Id="643" Count="6" />
      <LineId Id="609" Count="0" />
      <LineId Id="542" Count="8" />
      <LineId Id="635" Count="0" />
      <LineId Id="551" Count="8" />
      <LineId Id="634" Count="0" />
      <LineId Id="560" Count="14" />
      <LineId Id="633" Count="0" />
      <LineId Id="575" Count="8" />
      <LineId Id="636" Count="0" />
      <LineId Id="584" Count="10" />
      <LineId Id="631" Count="0" />
      <LineId Id="602" Count="3" />
      <LineId Id="278" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.setup">
      <LineId Id="57" Count="3" />
      <LineId Id="55" Count="0" />
      <LineId Id="109" Count="4" />
      <LineId Id="108" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stage">
      <LineId Id="735" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="743" Count="3" />
      <LineId Id="742" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="759" Count="2" />
      <LineId Id="659" Count="1" />
      <LineId Id="694" Count="4" />
      <LineId Id="741" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="704" Count="4" />
      <LineId Id="740" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="713" Count="1" />
      <LineId Id="738" Count="1" />
      <LineId Id="718" Count="1" />
      <LineId Id="665" Count="0" />
      <LineId Id="720" Count="1" />
      <LineId Id="766" Count="1" />
      <LineId Id="764" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="762" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="722" Count="1" />
      <LineId Id="657" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stageLeft">
      <LineId Id="1270" Count="0" />
      <LineId Id="1138" Count="19" />
      <LineId Id="1265" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1159" Count="0" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1194" Count="1" />
      <LineId Id="1200" Count="1" />
      <LineId Id="855" Count="0" />
      <LineId Id="1271" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stageRight">
      <LineId Id="1029" Count="0" />
      <LineId Id="941" Count="64" />
      <LineId Id="387" Count="0" />
      <LineId Id="1030" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stagingSequence">
      <LineId Id="6" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="12" Count="21" />
      <LineId Id="58" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>