<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{f31366c8-7465-4414-aaf4-fb935af985c5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	//executeTrigger : R_TRIG;
	execute : BOOL;
	
	stop : BOOL;
	
	manualStep : BOOL := TRUE;
	manualSuction : BOOL := FALSE;
END_VAR
VAR //local types
	stagingTemplateLeft, stagingTemplateRight AT %M* : WoodBunkTable; //declaration with %M* overwrites addresses of local attributes
	insertionLeft, insertionRight : Insertion;
END_VAR
VAR //for testing, to be removed when replaced with pressure sensors
	latchLeft, latchRight : BOOL; //prevents SMC sliders from overshooting the inner limit sensor
	
	suctionEnableTop : BOOL;
	suctionEnableLeft : BOOL;
	suctionEnableRight : BOOL;
	suctionEnableBottom : BOOL;
	
	done : BOOL;
	
	demoPairWB : PositionMaterials := (
		position := 0,
		top := 'WDW20',
		left := 'WDS14',
		right := 'WDS14',
		bottom := 'WDB20');
		
	demoPairCIP : PositionMaterials := (
		position := 0,
		top := 'CIP54',
		bottom := 'CIP18');
	
	demoHeight : REAL := 600; //mm
END_VAR
VAR
	robotLeftOutputs, robotRightOutputs : ARRAY[1..50] OF INT;
	
	insertionMaterials : ARRAY[Surface.TOP..Surface.BOTTOM] OF STRING;
	robotLeftMaterial, robotRightMaterial : STRING;
	
	step : (IDLE, LOAD_CIP, STAGING, LOAD_WB, PUSH, STRAP, RELEASE, COMPLETE := 1050);
	
	loadSet : INT;
	loadStepLeft, loadStepRight : INT;
	
	stageSet : INT;	
	stageStepLeft, stageStepRight : INT;
	iStagingSlotLeft, iStagingSlotRight : INT;
END_VAR
VAR //CONSTANT
	sectionID : SectionEnum := SectionEnum.CHIPBOARD;
	idleRobotOutput : ARRAY[1..50] OF INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//executeTrigger(CLK:= execute, Q=> );

(*
TODO:
	change robot reservation to both or none - should prevent sections from only being able to reserve 1 robot and hang the logic
*)

SetupHardware();
CallHardwareModules();

callLocalModules();

IF stop THEN
	insertionLeft.stop();
	insertionRight.stop();
	insertionBottom.stop();
	
	robotLeft.commandEx(idleRobotOutput);
	robotRight.commandEx(idleRobotOutput);	
	RETURN;
END_IF

IF NOT (insertionLeft.screw.HomeSet AND insertionRight.screw.HomeSet) THEN
	insertionLeft.homingSequence();
	insertionRight.homingSequence();
	insertionBottom.retract();
	RETURN;
END_IF


CASE step OF
	IDLE:
		IF execute THEN
			execute := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			step := LOAD_WB;
		END_IF
		
		SetSuctions(topSuction, suctionEnableTop);
		SetSuctions(leftSuction, suctionEnableLeft);
		SetSuctions(rightSuction, suctionEnableRight);
		SetSuctions(bottomSuction, suctionEnableBottom);
		
	LOAD_CIP:
		IF NOT done THEN
			done := loadCIP(pair:= demoPairWB);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			done := FALSE;
			execute := FALSE;
			
			step := STAGING;
		END_IF
		
	STAGING:
		IF NOT done THEN
			done := stage();
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			execute := FALSE;
			step := LOAD_WB;
		END_IF
	
	LOAD_WB:
		IF NOT done THEN
			done := loadWB(pair := demoPairWB);
		END_IF
		
		IF manualSuction THEN
			SetSuctions(topSuction, suctionEnableTop);
			SetSuctions(leftSuction, suctionEnableLeft);
			SetSuctions(rightSuction, suctionEnableRight);
			SetSuctions(bottomSuction, suctionEnableBottom);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			done := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			execute := FALSE;
			
			step := PUSH;
		END_IF
		
	PUSH:
		(*
		IF 
			insertionLeft.sliderPos <> demoHeight/2 //OR 
			//insertionRight.sliderPos <> demoHeight/2 //OR 
			//NOT insertionBottom.contact
		THEN
			insertionLeft.slideAbsolute(demoHeight/2);
			//insertionRight.slideAbsolute(demoHeight/2);
			RETURN;
		END_IF
		*)
		
		IF insertionLeft.screw.AtInnerLimit THEN
			latchLeft := TRUE;
		ELSIF NOT latchLeft THEN
			insertionLeft.press();
		END_IF
		
		IF insertionRight.screw.AtInnerLimit THEN
			latchRight := TRUE;
		ELSIF NOT latchRight THEN
			insertionRight.press();
		END_IF
		insertionBottom.extend();
		
		IF
			(manualStep AND_THEN execute) OR
			(latchLeft AND latchRight (*AND insertionBottom.extended*))
		THEN
			latchLeft := latchRight := FALSE;
			execute := FALSE;
			step := STRAP;
		END_IF
		
	STRAP:
		SetSuctions(leftSuction, FALSE);
		SetSuctions(rightSuction, FALSE);
		SetSuctions(bottomSuction, FALSE);
		
		IF strapper.done THEN
			step := RELEASE;
			RETURN;
		END_IF
		
		IF strapper.ready THEN
			strapper.strap();
		END_IF
		
		IF execute THEN
			execute := FALSE;
			step := RELEASE;
		END_IF
		
	RELEASE: //release command
		SetSuctions(topSuction, FALSE);
		
		//insertionLeft.slideAbsolute(0);
		//insertionRight.slideAbsolute(0);
		
		insertionLeft.release();
		insertionRight.release();
		insertionBottom.retract();
		
		IF 
			(insertionLeft.screw.AtHome AND insertionRight.screw.AtHome AND insertionBottom.retracted) OR
			execute
		THEN
			execute := FALSE;
			step := COMPLETE;
		END_IF
	
	COMPLETE:
		//reset everything
		step := IDLE;
		
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Load CIP" Id="{6998e9bf-e2b9-4fd9-897f-fda9aa3bdaab}" />
    <Folder Name="Load WB" Id="{e39bd797-b3d9-44f7-8374-fff5e06ecd5d}" />
    <Folder Name="Staging" Id="{df129403-abf4-453c-addd-f6dd4ee3c4b1}" />
    <Method Name="callLocalModules" Id="{8d1a2aa8-d62b-40c6-a10e-738718d053db}">
      <Declaration><![CDATA[METHOD callLocalModules : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[stagingTemplateLeft();
stagingTemplateRight();

insertionLeft(
	enable:= TRUE, 
	slider:= verticalDriveLeft, 
	screw:= horizontalDriveLeft, 
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );
	
insertionRight(
	enable:= TRUE, 
	slider:= verticalDriveRight, 
	screw:= horizontalDriveRight,  
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="changeRobotsEOAT" Id="{71a414a6-260d-4ed7-9b91-4169239414f1}">
      <Declaration><![CDATA[METHOD changeRobotsEOAT : BOOL
VAR_INPUT
	targetTool : SectionEnum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF robotLeft.tool <> targetTool THEN
	MEMSET(ADR(robotLeftOutputs), 0, SIZEOF(robotLeftOutputs));
	
	CASE targetTool OF
		SectionEnum.CHIPBOARD: robotLeftOutputs[1] := A21.TOOL_CHANGE_CHIPBOARD;
		SectionEnum.WOOD_BUNK: robotLeftOutputs[1] := A21.TOOL_CHANGE_BUNK;
	END_CASE
	
	robotLeft.setCommandAndWait(robotLeftOutputs);
END_IF

IF robotRight.tool <> targetTool THEN
	MEMSET(ADR(robotRightOutputs), 0, SIZEOF(robotRightOutputs));
	
	CASE targetTool OF
		SectionEnum.CHIPBOARD: robotLeftOutputs[1] := A21.TOOL_CHANGE_CHIPBOARD;
		SectionEnum.WOOD_BUNK: robotLeftOutputs[1] := A21.TOOL_CHANGE_BUNK;
	END_CASE
	
	robotRight.setCommandAndWait(robotRightOutputs);
END_IF

changeRobotsEOAT := robotLeft.tool = targetTool AND robotRight.tool = targetTool;]]></ST>
      </Implementation>
    </Method>
    <Method Name="createStagingTemplate" Id="{7fe7b744-7294-4b6c-b036-1426eaceb21a}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD PROTECTED createStagingTemplate : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stagingTemplateLeft.autofill(demoPairWB.top);
stagingTemplateLeft.autofill(demoPairWB.left);

stagingTemplateRight.autofill(demoPairWB.right);
stagingTemplateRight.autofill(demoPairWB.bottom);

createStagingTemplate := TRUE;

(*
FOR i:=0 TO GVL.maxPairs BY 1 DO //iterate through all pairs and autofill the template
	//LEFT TABLE
	remainingMaterial := materialsArr[i].top;
	WHILE FIND(remainingMaterial, '_') > 0 DO //until no underscore found
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateLeft.autofill(splitMaterial);
	END_WHILE
	stagingTemplateLeft.autofill(remainingMaterial);
	
	remainingMaterial := materialsArr[i].left;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateLeft.autofill(splitMaterial);
	END_WHILE
	stagingTemplateLeft.autofill(remainingMaterial);
	
	//RIGHT TABLE
	remainingMaterial := materialsArr[i].right;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateRight.autofill(splitMaterial);
	END_WHILE
	stagingTemplateRight.autofill(remainingMaterial);
	
	remainingMaterial := materialsArr[i].bottom;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		stagingTemplateRight.autofill(splitMaterial);
	END_WHILE
	stagingTemplateRight.autofill(remainingMaterial);
END_FOR
createStagingTemplate := TRUE;
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadCIP" Id="{4d48d146-da99-4898-b32c-d988fd277adc}" FolderPath="Load CIP\">
      <Declaration><![CDATA[METHOD loadCIP : BOOL
VAR_INPUT
	pair : REFERENCE TO PositionMaterials;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sectionID := SectionEnum.CHIPBOARD;

IF NOT robotLeft.operational AND NOT robotLeft.operational THEN //robots not operational
	error := TRUE;
	RETURN;
END_IF

IF NOT (robotLeft.reserve(sectionID) AND robotRight.reserve(sectionID)) THEN //robots not reserved
	RETURN;
END_IF

IF NOT (robotLeft.tool = sectionID AND robotRight.tool = sectionID) THEN //robots have wrong tool
	changeRobotsEOAT(targetTool := sectionID); //wait for robots to finish changing tools
	RETURN;
END_IF
//robots ok

CASE loadSet OF
	0: //demo only - only top chipboard loaded by left robot
		IF 
			loadingSequenceCIP(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				storage:= skidLeft, 
				loadStep:= loadStepLeft, 
				surfaceID:= Surface.TOP,
				material:= pair.top, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := 10;
		END_IF
		
	10: //recovery
		IF robotLeft.operational AND NOT robotRight.operational THEN //left ok, right fail
			IF //load bottom using left robot
				loadingSequenceCIP(
					actingRobot:= robotLeft, 
					robotOutputs:= robotLeftOutputs, 
					storage:= skidLeft, 
					loadStep:= loadStepLeft, 
					surfaceID:= Surface.BOTTOM,
					material:= pair.top, 
					fail=> ) //load bottom with left robot
			THEN
				step := COMPLETE;
			END_IF
			
		ELSIF NOT robotLeft.operational AND robotRight.operational THEN //left fail, right ok
			IF //load top using right robot
				loadingSequenceCIP(
					actingRobot:= robotRight, 
					robotOutputs:= robotRightOutputs, 
					storage:= skidRight, 
					loadStep:= loadStepRight, 
					surfaceID:= Surface.TOP,
					material:= pair.bottom, 
					fail=> ) //load top with right robot
			THEN
				step := COMPLETE;
			END_IF
			
		END_IF
		
	COMPLETE:
		loadSet := 0;
		loadStepLeft := loadStepRight := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		loadCIP := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequenceCIP" Id="{dab34edb-3da5-4404-8c49-3d0bd468a2d2}" FolderPath="Load CIP\">
      <Declaration><![CDATA[METHOD loadingSequenceCIP : BOOL
VAR_IN_OUT
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	storage : MaterialHolder;
	loadStep : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	slot : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF material = '' THEN
	loadingSequenceCIP := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0:
		IF NOT storage.findSlot(materialID := material, atSlot => slot) THEN
			fail := TRUE;
			RETURN;
		END_IF
		
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		robotOutputs[1] := A21.GET_CHIPBOARD_FROM_SKID;
		robotOutputs[2] := slot;
		
		IF surfaceID = Surface.BOTTOM THEN
			//lower conveyor
		END_IF
		
		CASE surfaceID OF
			Surface.TOP:
				IF actingRobot.setCommandAndWait(robotOutputs) THEN
					loadStep := 10;
				END_IF
				
			Surface.BOTTOM:
				//lower conveyor
				IF actingRobot.setCommandAndWait(robotOutputs) (*AND conveyor lowered*) THEN
					loadStep := 10;
				END_IF
			
		END_CASE
		
	10:
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		CASE surfaceID OF
			Surface.TOP: 					robotOutputs[1] := A21.PLACE_CHIPBOARD_TO_TOP;
			Surface.BOTTOM: 				robotOutputs[1] := A21.PLACE_CHIPBOARD_TO_BOTTOM;
		END_CASE
		robotOutputs[2] := slot;
		
		IF actingRobot.setCommandAndWait(robotOutputs) THEN
			loadStep := 10;
		END_IF
		
	COMPLETE:
		actingRobot.release(sectionID);
		loadingSequenceCIP := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadingSequenceWB" Id="{ec5e74a4-d8f7-4a78-89ca-cd705faa47d2}" FolderPath="Load WB\">
      <Declaration><![CDATA[METHOD loadingSequenceWB : BOOL
VAR_IN_OUT
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;
	holdingMaterial : STRING;
	table : WoodBunkTable;
	suctions : ARRAY[*] OF SuctionPad;
	loadStep : INT;
END_VAR
VAR_INPUT
	surfaceID : Surface;
	material : STRING;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	slot : INT;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF material = '' THEN
	loadingSequenceWB := TRUE;
	RETURN;
END_IF

CASE loadStep OF
	0:
		IF NOT table.findSlot(materialID := material, atSlot => slot) THEN			
			fail := TRUE;
			RETURN;
		END_IF
		
		//wood bunk exists on table
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		CASE surfaceID OF
			Surface.TOP: 					robotOutputs[1] := A21.LOAD_BUNK_TO_TOP;
			Surface.LEFT, Surface.RIGHT: 	robotOutputs[1] := A21.LOAD_BUNK_TO_SIDE;
			Surface.BOTTOM: 				robotOutputs[1] := A21.LOAD_BUNK_TO_BOTTOM;
		END_CASE
		robotOutputs[2] := slot;
		
		//move from table to robot gripper
		holdingMaterial := material;
		table.remove(i := slot, materialID => );
		
		IF NOT table.occupied[slot] THEN //wood bunk is taken from table
			table.remove(i := slot, materialID => );
			holdingMaterial := material;
			step := 10;
		END_IF
		
		IF actingRobot.setCommandAndWait(robotOutputs) THEN
			loadStep := COMPLETE;
		END_IF
		
	10:		
		IF actingRobot.setCommandAndWait(robotOutputs) THEN
			loadStep := COMPLETE;
		END_IF
		
	COMPLETE:
		FOR i:=LOWER_BOUND(suctions, 1) TO UPPER_BOUND(suctions, 1) BY 1 DO
			suctions[i].enable := TRUE;
		END_FOR
		
		insertionMaterials[Surface.TOP] := holdingMaterial;
		holdingMaterial := '';
		
		//table.remove(i := slot, materialID => );
		loadStep := 0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="loadWB" Id="{b6e713a8-dc8d-419f-844e-f7d0d4b22dfa}" FolderPath="Load WB\">
      <Declaration><![CDATA[METHOD PROTECTED loadWB : BOOL
VAR_INPUT
	pair : REFERENCE TO PositionMaterials;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sectionID := SectionEnum.WOOD_BUNK;

(*
anything outside the state machine is checked every cycle
-robot status
-robot reservation
-robot tool

everything else inside the state machine is performed in steps
*)

(*
IF NOT robotLeft.operational OR NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF
*)
IF NOT (robotLeft.reserve(sectionID) AND robotRight.reserve(sectionID)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = sectionID AND robotRight.tool = sectionID) THEN //robots have wrong tool
	changeRobotsEOAT(targetTool := sectionID); //wait for robots to finish changing tools
	RETURN;
END_IF

CASE loadSet OF
	0: //top and bottom
		IF 
			loadingSequenceWB(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				holdingMaterial:= robotLeftMaterial,
				table:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				suctions:= topSuction,
				surfaceID:= Surface.TOP, 
				material:= pair.top, 
				fail=> )
			AND
			loadingSequenceWB(
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs, 
				holdingMaterial:= robotRightMaterial,
				table:= stagingTableRight, 
				loadStep:= loadStepRight, 
				suctions:= bottomSuction,
				surfaceID:= Surface.BOTTOM, 
				material:= pair.bottom, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := 10;
		END_IF
		
	10: //sides
		IF
			loadingSequenceWB(
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs, 
				holdingMaterial:= robotLeftMaterial,
				table:= stagingTableLeft, 
				loadStep:= loadStepLeft, 
				suctions:= leftSuction,
				surfaceID:= Surface.LEFT, 
				material:= pair.left, 
				fail=> )
			AND
			loadingSequenceWB(
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs, 
				holdingMaterial:= robotRightMaterial,
				table:= stagingTableRight, 
				loadStep:= loadStepRight, 
				suctions:= rightSuction,
				surfaceID:= Surface.RIGHT, 
				material:= pair.right, 
				fail=> )
		THEN
			loadStepLeft := loadStepRight := 0;
			loadSet := COMPLETE;
		END_IF
		
	COMPLETE:
		loadSet := 0;
		loadStepLeft := loadStepRight := 0;
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		loadWB := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="stage" Id="{413ca9c3-a808-4782-b740-b91ebf3df60f}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD stage : BOOL
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sectionID := SectionEnum.WOOD_BUNK;
(*
IF NOT robotLeft.operational OR NOT robotLeft.operational THEN
	error := TRUE;
	RETURN;
END_IF
*)
IF NOT (robotLeft.reserve(sectionID) AND robotRight.reserve(sectionID)) THEN
	RETURN;
END_IF

IF NOT (robotLeft.tool = sectionID AND robotRight.tool = sectionID) THEN //robots have wrong tool
	changeRobotsEOAT(targetTool := sectionID); //wait for robots to finish changing tools
	RETURN;
END_IF

CASE stageSet OF
	0: //create staging template
		IF createStagingTemplate() THEN
			step := 10;
		END_IF
	
	10: //staging sequence
		IF
			stagingSequence(				
				actingRobot:= robotLeft, 
				robotOutputs:= robotLeftOutputs,
				holdingMaterial:= robotLeftMaterial,
				template:= stagingTemplateLeft,
				table:= stagingTableLeft,  
				magazine:= magazineLeft, 
				stagingStep:= stageStepLeft, 
				stagingSlot:= iStagingSlotLeft,
				fail=> )
				
			AND
			stagingSequence(
				actingRobot:= robotRight, 
				robotOutputs:= robotRightOutputs,
				holdingMaterial:= robotRightMaterial,
				template:= stagingTemplateRight, 
				magazine:= magazineRight, 
				table:= stagingTableRight, 
				stagingStep:= stageStepRight, 
				stagingSlot:= iStagingSlotRight,
				fail=> )
		THEN
			stageStepLeft := stageStepRight := 0;
			iStagingSlotLeft := iStagingSlotRight := 0;
			
			stageSet := COMPLETE;
		END_IF
		
	COMPLETE:
		stagingTemplateRight.clear(); //clear the staging templates
		stagingTemplateLeft.clear();
		
		robotLeft.release(sectionID); //release the robots
		robotRight.release(sectionID);
		
		stageSet := 0;
		stage := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="stagingSequence" Id="{a405d3c7-f8a4-4bcd-a99a-948da7c9242e}" FolderPath="Staging\">
      <Declaration><![CDATA[METHOD stagingSequence : BOOL
VAR_IN_OUT
	actingRobot : Robot;
	robotOutputs : ARRAY[1..50] OF INT;	
	holdingMaterial : STRING;
	template : WoodBunkTable;
	table : WoodBunkTable;
	magazine : MaterialHolder;
	stagingStep : INT;
	stagingSlot : INT;
END_VAR
VAR_OUTPUT
	fail : BOOL;
END_VAR
VAR
	finished : BOOL;
	slot : INT;
END_VAR
VAR CONSTANT
	WIP : INT := 0;
	PASSED : INT := 1;
	FAILED : INT := 2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF
	table.isFull() OR stagingSlot > 10 OR //table full
	MEMCMP(ADR(table.slots), ADR(template.slots), SIZEOF(table.slots)) = 0 //table matches template
THEN
	stagingSequence := TRUE;
	RETURN;
END_IF

//follow the template as is

CASE stagingStep OF
	0:
		IF NOT magazine.findSlot(materialID:= template.slots[stagingSlot], atSlot => slot) THEN
			fail := TRUE;
			RETURN;
		END_IF

		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		robotOutputs[1] := A21.STAGE_BUNK;
		robotOutputs[2] := slot;
		robotOutputs[3] := stagingSlot;
		
		holdingMaterial := magazine.slots[slot];
		
		IF table.occupied[slot] THEN //move from robot gripper to table
			table.place(i := slot, materialID := holdingMaterial);
			holdingMaterial := '';
		END_IF
		
		IF actingRobot.setCommandAndWait(robotOutputs) THEN
			stagingStep := COMPLETE;
		END_IF
		
		(*
		IF actingRobot.inputs[5].10 THEN //in position for inspection
			robotOutputs[4] := PASSED;
			actingStep := 30;
		END_IF
		*)
	(*
	30:
		//IF finished THEN
		IF actingRobot.setCommandAndWait(robotOutputs) THEN
			actingStep := COMPLETE;
		END_IF
	*)
	
	COMPLETE:
		actingRobot.reset();
		
		MEMSET(ADR(robotOutputs), 0, SIZEOF(robotOutputs));
		
		stagingSlot := stagingSlot + 1;
		stagingStep := 0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="2525" Count="10" />
      <LineId Id="2875" Count="0" />
      <LineId Id="2874" Count="0" />
      <LineId Id="2876" Count="0" />
      <LineId Id="2883" Count="0" />
      <LineId Id="2882" Count="0" />
      <LineId Id="2886" Count="0" />
      <LineId Id="2879" Count="0" />
      <LineId Id="2881" Count="0" />
      <LineId Id="2878" Count="0" />
      <LineId Id="2877" Count="0" />
      <LineId Id="2536" Count="1" />
      <LineId Id="2944" Count="1" />
      <LineId Id="2767" Count="1" />
      <LineId Id="2543" Count="6" />
      <LineId Id="2870" Count="0" />
      <LineId Id="2550" Count="1" />
      <LineId Id="2865" Count="0" />
      <LineId Id="2867" Count="2" />
      <LineId Id="2866" Count="0" />
      <LineId Id="2552" Count="0" />
      <LineId Id="2554" Count="0" />
      <LineId Id="2774" Count="1" />
      <LineId Id="2773" Count="0" />
      <LineId Id="2777" Count="0" />
      <LineId Id="2779" Count="4" />
      <LineId Id="2785" Count="2" />
      <LineId Id="2778" Count="0" />
      <LineId Id="2563" Count="1" />
      <LineId Id="2788" Count="2" />
      <LineId Id="2568" Count="0" />
      <LineId Id="2793" Count="2" />
      <LineId Id="2569" Count="5" />
      <LineId Id="2580" Count="2" />
      <LineId Id="2746" Count="0" />
      <LineId Id="2761" Count="0" />
      <LineId Id="2758" Count="2" />
      <LineId Id="2756" Count="0" />
      <LineId Id="2762" Count="0" />
      <LineId Id="2744" Count="0" />
      <LineId Id="2733" Count="0" />
      <LineId Id="2736" Count="0" />
      <LineId Id="2734" Count="0" />
      <LineId Id="2737" Count="0" />
      <LineId Id="2742" Count="0" />
      <LineId Id="2739" Count="1" />
      <LineId Id="2743" Count="0" />
      <LineId Id="2738" Count="0" />
      <LineId Id="2735" Count="0" />
      <LineId Id="2603" Count="24" />
      <LineId Id="2631" Count="0" />
      <LineId Id="2805" Count="0" />
      <LineId Id="2797" Count="1" />
      <LineId Id="2801" Count="0" />
      <LineId Id="2800" Count="0" />
      <LineId Id="2803" Count="1" />
      <LineId Id="2802" Count="0" />
      <LineId Id="2799" Count="0" />
      <LineId Id="2657" Count="28" />
      <LineId Id="2707" Count="1" />
      <LineId Id="2807" Count="0" />
      <LineId Id="2809" Count="0" />
      <LineId Id="2808" Count="0" />
      <LineId Id="2810" Count="0" />
      <LineId Id="2709" Count="1" />
      <LineId Id="2716" Count="4" />
      <LineId Id="167" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.callLocalModules">
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="6" Count="9" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="21" Count="6" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.changeRobotsEOAT">
      <LineId Id="10" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.createStagingTemplate">
      <LineId Id="259" Count="40" />
      <LineId Id="240" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadCIP">
      <LineId Id="233" Count="1" />
      <LineId Id="87" Count="7" />
      <LineId Id="232" Count="0" />
      <LineId Id="96" Count="8" />
      <LineId Id="187" Count="6" />
      <LineId Id="113" Count="0" />
      <LineId Id="124" Count="4" />
      <LineId Id="163" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="195" Count="7" />
      <LineId Id="218" Count="2" />
      <LineId Id="203" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="206" Count="7" />
      <LineId Id="222" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="154" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadingSequenceCIP">
      <LineId Id="25" Count="4" />
      <LineId Id="58" Count="9" />
      <LineId Id="115" Count="3" />
      <LineId Id="68" Count="30" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadingSequenceWB">
      <LineId Id="398" Count="2" />
      <LineId Id="477" Count="0" />
      <LineId Id="407" Count="1" />
      <LineId Id="473" Count="0" />
      <LineId Id="515" Count="2" />
      <LineId Id="485" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="523" Count="7" />
      <LineId Id="536" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="539" Count="1" />
      <LineId Id="538" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="418" Count="7" />
      <LineId Id="469" Count="1" />
      <LineId Id="482" Count="0" />
      <LineId Id="426" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.loadWB">
      <LineId Id="656" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="670" Count="1" />
      <LineId Id="673" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="532" Count="1" />
      <LineId Id="536" Count="2" />
      <LineId Id="643" Count="6" />
      <LineId Id="609" Count="0" />
      <LineId Id="542" Count="6" />
      <LineId Id="680" Count="0" />
      <LineId Id="549" Count="1" />
      <LineId Id="635" Count="0" />
      <LineId Id="551" Count="6" />
      <LineId Id="681" Count="0" />
      <LineId Id="558" Count="1" />
      <LineId Id="634" Count="0" />
      <LineId Id="560" Count="12" />
      <LineId Id="683" Count="0" />
      <LineId Id="573" Count="1" />
      <LineId Id="633" Count="0" />
      <LineId Id="575" Count="6" />
      <LineId Id="682" Count="0" />
      <LineId Id="582" Count="1" />
      <LineId Id="636" Count="0" />
      <LineId Id="584" Count="10" />
      <LineId Id="631" Count="0" />
      <LineId Id="602" Count="3" />
      <LineId Id="278" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stage">
      <LineId Id="771" Count="0" />
      <LineId Id="773" Count="3" />
      <LineId Id="772" Count="0" />
      <LineId Id="770" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="743" Count="3" />
      <LineId Id="742" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="759" Count="2" />
      <LineId Id="659" Count="1" />
      <LineId Id="694" Count="1" />
      <LineId Id="741" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="781" Count="1" />
      <LineId Id="780" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="704" Count="1" />
      <LineId Id="709" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="784" Count="0" />
      <LineId Id="786" Count="2" />
      <LineId Id="711" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="713" Count="1" />
      <LineId Id="738" Count="1" />
      <LineId Id="718" Count="1" />
      <LineId Id="665" Count="0" />
      <LineId Id="720" Count="1" />
      <LineId Id="766" Count="1" />
      <LineId Id="764" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="762" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="722" Count="1" />
      <LineId Id="657" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stagingSequence">
      <LineId Id="278" Count="53" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>