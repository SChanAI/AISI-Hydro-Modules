<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TeknicHW" Id="{f2f2a1c1-ef3e-4af6-9287-f7b73dfedc95}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TeknicHW //EXTENDS EncodedDrive
VAR_INPUT
	bEnable : BOOL;
END_VAR
VAR_OUTPUT
	enable AT %Q* : BOOL; //enable + pulses
	A AT %Q* : BOOL; //direction (F = inwards, T = outwards)
	B AT %Q* : BOOL; //home bit
	brakeRelease AT %Q* : BOOL;
	
	contact AT %I* : BOOL;
	
	home AT %I* : BOOL;
	outerLimit AT %I* : BOOL;
	innerLimit AT %I* : BOOL;
	
	homeSet : BOOL;
	busy : BOOL;
	error : BOOL;
	done AT %I* : BOOL;
	
	position : LREAL;
	targetPos : LREAL;
END_VAR
VAR
	pulseCounter : INT;
	pulser : TON;
	
	resetTimer : TP;
	
	mode : (HOLD, TARGET, CONTINUOUS);	
	step : Homing;//(IDLE, HOME_UP, HOME_FINAL, DOWN, REDO_HOME, HOME_DONE);
END_VAR
VAR_STAT CONSTANT
	resetPulseWidth : TIME := T#1000MS;
	pulseWidth : TIME := T#25MS;
	unitsPerPulse : INT := 800; //800 Teknic units per revolution
	distancePerPulse : INT := 5; //5mm per revolution
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bEnable THEN
	mode := HOLD;
END_IF

resetTimer(IN:= , PT:= resetPulseWidth, Q=> , ET=> );
resetTimer.IN := resetTimer.IN AND resetTimer.Q; //self-reset

IF resetTimer.Q THEN
	enable := FALSE;
	mode := HOLD;
END_IF
(*
IF resetTimer.Q THEN
	resetTimer.IN := FALSE;	
	mode := HOLD;
	//RETURN;
ELSIF resetTimer.IN THEN
	enable := FALSE;
	mode := HOLD;
	//RETURN;
END_IF
*)

CASE mode OF
	HOLD:
		IF NOT resetTimer.IN THEN
			enable := bEnable;
		END_IF
		pulseCounter := 0;
	
	TARGET:
		IF WithinTolerance(position, target, unitsPerPulse) THEN
			pulseCounter := 0;
			mode := HOLD;
			
		ELSIF NOT busy THEN
			A := position < target;
			requestPulses(1); //pulses revolution at a time, safer but choppy
			//requestPulses( TO_INT(CEILING(ABS(position - targetPos)/distancePerPulse)) ); //calculates all pulses and new position up front, continuous motion but may exceed travel limits
		END_IF
		//*)
	CONTINUOUS:
		requestPulses(1);
		
END_CASE

IF home OR innerLimit OR outerLimit THEN
	pulseCounter := 0;
	mode := HOLD;
END_IF

IF home AND_THEN A THEN //block outwards motion
	position := 0;
	pulseCounter := 0;
	mode := HOLD;
	
ELSIF outerLimit AND_THEN A THEN //block outwards motion
	pulseCounter := 0;
	mode := HOLD;

ELSIF innerLimit AND_THEN NOT A THEN //block inwards motion
	pulseCounter := 0;
	mode := HOLD;
	
END_IF

sequence();]]></ST>
    </Implementation>
    <Method Name="homingSequence" Id="{4c078f6b-5e30-4406-b11a-fba70e03b84b}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	Homing.IDLE:
		enable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		homeSet := FALSE;
		step := Homing.REDO;
		
	Homing.REDO: //let insertion drop to inner limit before homing
		enable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		IF NOT innerLimit THEN
			enable := TRUE;
			step := Homing.HOME_OUT;
		END_IF
	
	Homing.HOME_OUT:
		enable := TRUE;
		A := FALSE;
		B := TRUE;
		brakeRelease := TRUE;
		
		IF NOT home THEN
			B := FALSE;
			step := Homing.DONE;
		END_IF
		
	Homing.DONE:
		//enable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		position := 0;
		homeSet := TRUE;
		homingSequence := TRUE;
		step := Homing.IDLE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{de1b0ff3-ba6a-4c46-b761-cdd04c29ba51}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetPos := newTarget;
mode := TARGET;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{2d54b74f-51c6-4f44-aa9a-a0185ebc66f6}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF direction = MC_Negative_Direction THEN
	A := FALSE;
ELSIF direction = MC_Positive_Direction THEN
	A := TRUE;
END_IF

mode := CONTINUOUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="requestPulses" Id="{9be2f5f0-4c2c-424d-a26b-bcf77a93b753}">
      <Declaration><![CDATA[METHOD PRIVATE requestPulses : BOOL
VAR_INPUT
	request : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (done OR pulseCounter = 0) AND request > 0 THEN
	pulseCounter := request;
	
	requestPulses := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{1c45bc6e-39b8-4809-b9a5-c28ef542dac2}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[resetTimer.IN := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence" Id="{2ad1a8af-5aed-432e-8bcf-5e2ff870d8fe}">
      <Declaration><![CDATA[METHOD sequence : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pulser(IN:= , PT:= pulseWidth, Q=> , ET=> ); //when timer is enabled, this toggles enable every <pulseWidth>

IF pulseCounter = 0 THEN
	busy := FALSE;
	
	enable := TRUE;
	pulser.IN := FALSE;
	RETURN;
END_IF

busy := TRUE;
pulser.IN := TRUE;

IF pulser.Q THEN
	pulser.IN := FALSE;
	enable := NOT enable;
	
	IF enable THEN //enable is TRUE after toggle
		pulseCounter := pulseCounter - 1;
		
		IF A THEN
			position := position + distancePerPulse;
		ELSE
			position := position - distancePerPulse;
		END_IF
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TeknicHW">
      <LineId Id="1716" Count="4" />
      <LineId Id="1908" Count="0" />
      <LineId Id="1907" Count="0" />
      <LineId Id="1903" Count="1" />
      <LineId Id="1906" Count="0" />
      <LineId Id="1905" Count="0" />
      <LineId Id="1902" Count="0" />
      <LineId Id="1721" Count="0" />
      <LineId Id="1723" Count="0" />
      <LineId Id="1726" Count="0" />
      <LineId Id="1898" Count="0" />
      <LineId Id="1728" Count="0" />
      <LineId Id="1730" Count="0" />
      <LineId Id="1732" Count="0" />
      <LineId Id="1897" Count="0" />
      <LineId Id="1734" Count="4" />
      <LineId Id="1789" Count="2" />
      <LineId Id="1740" Count="2" />
      <LineId Id="1765" Count="2" />
      <LineId Id="1833" Count="0" />
      <LineId Id="1769" Count="0" />
      <LineId Id="1794" Count="0" />
      <LineId Id="1793" Count="0" />
      <LineId Id="1834" Count="0" />
      <LineId Id="1777" Count="10" />
      <LineId Id="1836" Count="2" />
      <LineId Id="1848" Count="0" />
      <LineId Id="1839" Count="2" />
      <LineId Id="1851" Count="0" />
      <LineId Id="1842" Count="2" />
      <LineId Id="1852" Count="0" />
      <LineId Id="1845" Count="1" />
      <LineId Id="1835" Count="0" />
      <LineId Id="1788" Count="0" />
      <LineId Id="1215" Count="0" />
    </LineIds>
    <LineIds Name="TeknicHW.homingSequence">
      <LineId Id="98" Count="8" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="160" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="167" Count="2" />
      <LineId Id="166" Count="0" />
      <LineId Id="111" Count="3" />
      <LineId Id="118" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="171" Count="2" />
      <LineId Id="170" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="129" Count="4" />
    </LineIds>
    <LineIds Name="TeknicHW.moveAbsolute">
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TeknicHW.moveContinuous">
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="TeknicHW.requestPulses">
      <LineId Id="81" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="131" Count="0" />
    </LineIds>
    <LineIds Name="TeknicHW.reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TeknicHW.sequence">
      <LineId Id="6" Count="26" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>